{"ast":null,"code":"/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\nvar Request = require('../lib/request').Request;\n\nvar xml = require('../plugins/xml');\n/**\n * Creates a new Upload service instance. Since the Upload API only\n * does one thing (upload files), an Upload instance is simply\n * a Request subclass.\n *\n * The Upload endpoint requires authentication. You should pass a configured\n * instance of the [OAuth plugin]{@link Flickr.OAuth.createPlugin} to upload\n * photos on behalf of another user.\n *\n * @param {Function} auth\n * @param {String|fs.ReadStream|Buffer} file\n * @param {Object} [args]\n * @constructor\n * @extends Request\n * @memberof Flickr\n *\n * @example\n *\n * var upload = new Flickr.Upload(auth, 'upload.png', {\n *   title: 'Works on MY machine!'\n * });\n *\n * upload.then(function (res) {\n *   console.log('yay!', res.body);\n * }).catch(function (err) {\n *   console.error('bonk', err);\n * });\n *\n * @see https://www.flickr.com/services/api/upload.api.html\n */\n\n\nfunction Upload(auth, file, args) {\n  // allow creating a client without `new`\n  if (!(this instanceof Upload)) {\n    return new Upload(auth, file, args);\n  }\n\n  Request.call(this, 'POST', 'https://up.flickr.com/services/upload');\n\n  if (typeof auth !== 'function') {\n    throw new Error('Missing required argument \"auth\"');\n  }\n\n  if (typeof args === 'undefined') {\n    args = {};\n  } // superagent and form-data try to assume the filename from the file value\n  // given, but expect it to be passed explicitly if given a Buffer, so we'll\n  // just make one up. Leave it falsy so that that we don't change\n  // superagent's default behavior\n\n\n  let filename = Buffer.isBuffer(file) ? 'flickr-sdk.jpg' : undefined;\n  this.attach('photo', file, filename);\n  this.field(args);\n  this.use(xml);\n  this.use(auth);\n}\n\nUpload.prototype = Object.create(Request.prototype);\nmodule.exports = Upload;","map":{"version":3,"sources":["/Users/s-fujimoto/projects/mindtrip/node_modules/flickr-sdk/services/upload.js"],"names":["Request","require","xml","Upload","auth","file","args","call","Error","filename","Buffer","isBuffer","undefined","attach","field","use","prototype","Object","create","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BD,OAAxC;;AACA,IAAIE,GAAG,GAAGD,OAAO,CAAC,gBAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAEjC;AACA,MAAI,EAAE,gBAAgBH,MAAlB,CAAJ,EAA+B;AAC9B,WAAO,IAAIA,MAAJ,CAAWC,IAAX,EAAiBC,IAAjB,EAAuBC,IAAvB,CAAP;AACA;;AAEDN,EAAAA,OAAO,CAACO,IAAR,CAAa,IAAb,EAAmB,MAAnB,EAA2B,uCAA3B;;AAEA,MAAI,OAAOH,IAAP,KAAgB,UAApB,EAAgC;AAC/B,UAAM,IAAII,KAAJ,CAAU,kCAAV,CAAN;AACA;;AAED,MAAI,OAAOF,IAAP,KAAgB,WAApB,EAAiC;AAChCA,IAAAA,IAAI,GAAG,EAAP;AACA,GAfgC,CAiBjC;AACA;AACA;AACA;;;AACA,MAAIG,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBN,IAAhB,IAAwB,gBAAxB,GAA2CO,SAA1D;AAEA,OAAKC,MAAL,CAAY,OAAZ,EAAqBR,IAArB,EAA2BI,QAA3B;AACA,OAAKK,KAAL,CAAWR,IAAX;AACA,OAAKS,GAAL,CAASb,GAAT;AACA,OAAKa,GAAL,CAASX,IAAT;AACA;;AAEDD,MAAM,CAACa,SAAP,GAAmBC,MAAM,CAACC,MAAP,CAAclB,OAAO,CAACgB,SAAtB,CAAnB;AAEAG,MAAM,CAACC,OAAP,GAAiBjB,MAAjB","sourcesContent":["/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\n\nvar Request = require('../lib/request').Request;\nvar xml = require('../plugins/xml');\n\n/**\n * Creates a new Upload service instance. Since the Upload API only\n * does one thing (upload files), an Upload instance is simply\n * a Request subclass.\n *\n * The Upload endpoint requires authentication. You should pass a configured\n * instance of the [OAuth plugin]{@link Flickr.OAuth.createPlugin} to upload\n * photos on behalf of another user.\n *\n * @param {Function} auth\n * @param {String|fs.ReadStream|Buffer} file\n * @param {Object} [args]\n * @constructor\n * @extends Request\n * @memberof Flickr\n *\n * @example\n *\n * var upload = new Flickr.Upload(auth, 'upload.png', {\n *   title: 'Works on MY machine!'\n * });\n *\n * upload.then(function (res) {\n *   console.log('yay!', res.body);\n * }).catch(function (err) {\n *   console.error('bonk', err);\n * });\n *\n * @see https://www.flickr.com/services/api/upload.api.html\n */\n\nfunction Upload(auth, file, args) {\n\n\t// allow creating a client without `new`\n\tif (!(this instanceof Upload)) {\n\t\treturn new Upload(auth, file, args);\n\t}\n\n\tRequest.call(this, 'POST', 'https://up.flickr.com/services/upload');\n\n\tif (typeof auth !== 'function') {\n\t\tthrow new Error('Missing required argument \"auth\"');\n\t}\n\n\tif (typeof args === 'undefined') {\n\t\targs = {};\n\t}\n\n\t// superagent and form-data try to assume the filename from the file value\n\t// given, but expect it to be passed explicitly if given a Buffer, so we'll\n\t// just make one up. Leave it falsy so that that we don't change\n\t// superagent's default behavior\n\tlet filename = Buffer.isBuffer(file) ? 'flickr-sdk.jpg' : undefined;\n\n\tthis.attach('photo', file, filename);\n\tthis.field(args);\n\tthis.use(xml);\n\tthis.use(auth);\n}\n\nUpload.prototype = Object.create(Request.prototype);\n\nmodule.exports = Upload;\n"]},"metadata":{},"sourceType":"script"}