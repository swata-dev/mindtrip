{"ast":null,"code":"/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\nvar Request = require('../lib/request').Request;\n\nvar xml = require('../plugins/xml');\n/**\n * Creates a new Replace service instance. Since the Replace API only\n * does one thing (replace files), an Replace instance is simply\n * a Request subclass.\n *\n * The Replace endpoint requires authentication. You should pass a configured\n * instance of the [OAuth plugin]{@link Flickr.OAuth.createPlugin} to replace\n * photos on behalf of another user.\n *\n * @param {Function} auth\n * @param {Number|String} photoID The ID of the photo to replace\n * @param {String|fs.ReadStream|Buffer} file\n * @param {Object} [args]\n * @constructor\n * @extends Request\n * @memberof Flickr\n *\n * @example\n *\n * var replace = new Flickr.Replace(auth, 41234567890, 'replace.png', {\n *   title: 'Now in pink!'\n * });\n *\n * replace.then(function (res) {\n *   console.log('yay!', res.body);\n * }).catch(function (err) {\n *   console.error('bonk', err);\n * });\n *\n * @see https://www.flickr.com/services/api/replace.api.html\n */\n\n\nfunction Replace(auth, photoID, file, args) {\n  // allow creating a client without `new`\n  if (!(this instanceof Replace)) {\n    return new Replace(auth, photoID, file, args);\n  }\n\n  Request.call(this, 'POST', 'https://up.flickr.com/services/replace');\n\n  if (typeof auth !== 'function') {\n    throw new Error('Missing required argument \"auth\"');\n  }\n\n  if (typeof photoID === 'undefined') {\n    throw new Error('Missing required argument \"photoID\"');\n  }\n\n  if (typeof args === 'undefined') {\n    args = {};\n  }\n\n  this.attach('photo', file);\n  this.field('photo_id', photoID);\n  this.field(args);\n  this.use(xml);\n  this.use(auth);\n}\n\nReplace.prototype = Object.create(Request.prototype);\nmodule.exports = Replace;","map":{"version":3,"sources":["/Users/s-fujimoto/projects/mindtrip/node_modules/flickr-sdk/services/replace.js"],"names":["Request","require","xml","Replace","auth","photoID","file","args","call","Error","attach","field","use","prototype","Object","create","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BD,OAAxC;;AACA,IAAIE,GAAG,GAAGD,OAAO,CAAC,gBAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,OAAT,CAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4C;AAE3C;AACA,MAAI,EAAE,gBAAgBJ,OAAlB,CAAJ,EAAgC;AAC/B,WAAO,IAAIA,OAAJ,CAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,IAAjC,CAAP;AACA;;AAEDP,EAAAA,OAAO,CAACQ,IAAR,CAAa,IAAb,EAAmB,MAAnB,EAA2B,wCAA3B;;AAEA,MAAI,OAAOJ,IAAP,KAAgB,UAApB,EAAgC;AAC/B,UAAM,IAAIK,KAAJ,CAAU,kCAAV,CAAN;AACA;;AAED,MAAI,OAAOJ,OAAP,KAAmB,WAAvB,EAAoC;AACnC,UAAM,IAAII,KAAJ,CAAU,qCAAV,CAAN;AACA;;AAED,MAAI,OAAOF,IAAP,KAAgB,WAApB,EAAiC;AAChCA,IAAAA,IAAI,GAAG,EAAP;AACA;;AAED,OAAKG,MAAL,CAAY,OAAZ,EAAqBJ,IAArB;AACA,OAAKK,KAAL,CAAW,UAAX,EAAuBN,OAAvB;AACA,OAAKM,KAAL,CAAWJ,IAAX;AACA,OAAKK,GAAL,CAASV,GAAT;AACA,OAAKU,GAAL,CAASR,IAAT;AACA;;AAEDD,OAAO,CAACU,SAAR,GAAoBC,MAAM,CAACC,MAAP,CAAcf,OAAO,CAACa,SAAtB,CAApB;AAEAG,MAAM,CAACC,OAAP,GAAiBd,OAAjB","sourcesContent":["/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\n\nvar Request = require('../lib/request').Request;\nvar xml = require('../plugins/xml');\n\n/**\n * Creates a new Replace service instance. Since the Replace API only\n * does one thing (replace files), an Replace instance is simply\n * a Request subclass.\n *\n * The Replace endpoint requires authentication. You should pass a configured\n * instance of the [OAuth plugin]{@link Flickr.OAuth.createPlugin} to replace\n * photos on behalf of another user.\n *\n * @param {Function} auth\n * @param {Number|String} photoID The ID of the photo to replace\n * @param {String|fs.ReadStream|Buffer} file\n * @param {Object} [args]\n * @constructor\n * @extends Request\n * @memberof Flickr\n *\n * @example\n *\n * var replace = new Flickr.Replace(auth, 41234567890, 'replace.png', {\n *   title: 'Now in pink!'\n * });\n *\n * replace.then(function (res) {\n *   console.log('yay!', res.body);\n * }).catch(function (err) {\n *   console.error('bonk', err);\n * });\n *\n * @see https://www.flickr.com/services/api/replace.api.html\n */\n\nfunction Replace(auth, photoID, file, args) {\n\n\t// allow creating a client without `new`\n\tif (!(this instanceof Replace)) {\n\t\treturn new Replace(auth, photoID, file, args);\n\t}\n\n\tRequest.call(this, 'POST', 'https://up.flickr.com/services/replace');\n\n\tif (typeof auth !== 'function') {\n\t\tthrow new Error('Missing required argument \"auth\"');\n\t}\n\n\tif (typeof photoID === 'undefined') {\n\t\tthrow new Error('Missing required argument \"photoID\"');\n\t}\n\n\tif (typeof args === 'undefined') {\n\t\targs = {};\n\t}\n\n\tthis.attach('photo', file);\n\tthis.field('photo_id', photoID);\n\tthis.field(args);\n\tthis.use(xml);\n\tthis.use(auth);\n}\n\nReplace.prototype = Object.create(Request.prototype);\n\nmodule.exports = Replace;\n"]},"metadata":{},"sourceType":"script"}