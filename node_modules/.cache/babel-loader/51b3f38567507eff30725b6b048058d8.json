{"ast":null,"code":"/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\n\n/**\n * Custom response parser routine to handle Flickr API-style\n * error responses. The Flickr API has a whole bunch of client\n * error codes, but they all come back as HTTP 200 responses.\n * Here, we add in additional logic to accommodate this and check\n * for a Flickr API error. If we find one, craft a new error\n * out of that and throw it.\n * @param {Response} res\n * @returns {Boolean}\n * @throws {Error}\n */\nfunction parseFlickr(res) {\n  var body = res.body;\n  var err;\n\n  if (body && body.stat === 'fail') {\n    err = new Error(body.message);\n    err.stat = body.stat;\n    err.code = body.code;\n    throw err;\n  }\n\n  return res.status >= 200 && res.status < 300;\n}\n/**\n * Superagent plugin-style function to request and parse\n * JSON responses from the Flickr REST API. We need to\n * specify content-type: text/plain here to appease CORS\n * since the API does not accept application/json.\n * @param {Request} req\n * @returns {undefined}\n */\n\n\nmodule.exports = function (req) {\n  req.query({\n    format: 'json'\n  });\n  req.query({\n    nojsoncallback: 1\n  });\n  req.type('text/plain');\n  req.ok(parseFlickr);\n};","map":{"version":3,"sources":["/Users/s-fujimoto/projects/mindtrip/node_modules/flickr-sdk/plugins/json.js"],"names":["parseFlickr","res","body","err","stat","Error","message","code","status","module","exports","req","query","format","nojsoncallback","type","ok"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AACzB,MAAIC,IAAI,GAAGD,GAAG,CAACC,IAAf;AACA,MAAIC,GAAJ;;AAEA,MAAID,IAAI,IAAIA,IAAI,CAACE,IAAL,KAAc,MAA1B,EAAkC;AACjCD,IAAAA,GAAG,GAAG,IAAIE,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACAH,IAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAI,CAACE,IAAhB;AACAD,IAAAA,GAAG,CAACI,IAAJ,GAAWL,IAAI,CAACK,IAAhB;AAEA,UAAMJ,GAAN;AACA;;AAED,SAAOF,GAAG,CAACO,MAAJ,IAAc,GAAd,IAAqBP,GAAG,CAACO,MAAJ,GAAa,GAAzC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC/BA,EAAAA,GAAG,CAACC,KAAJ,CAAU;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAV;AACAF,EAAAA,GAAG,CAACC,KAAJ,CAAU;AAAEE,IAAAA,cAAc,EAAE;AAAlB,GAAV;AACAH,EAAAA,GAAG,CAACI,IAAJ,CAAS,YAAT;AACAJ,EAAAA,GAAG,CAACK,EAAJ,CAAOhB,WAAP;AACA,CALD","sourcesContent":["/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\n\n/**\n * Custom response parser routine to handle Flickr API-style\n * error responses. The Flickr API has a whole bunch of client\n * error codes, but they all come back as HTTP 200 responses.\n * Here, we add in additional logic to accommodate this and check\n * for a Flickr API error. If we find one, craft a new error\n * out of that and throw it.\n * @param {Response} res\n * @returns {Boolean}\n * @throws {Error}\n */\n\nfunction parseFlickr(res) {\n\tvar body = res.body;\n\tvar err;\n\n\tif (body && body.stat === 'fail') {\n\t\terr = new Error(body.message);\n\t\terr.stat = body.stat;\n\t\terr.code = body.code;\n\n\t\tthrow err;\n\t}\n\n\treturn res.status >= 200 && res.status < 300;\n}\n\n/**\n * Superagent plugin-style function to request and parse\n * JSON responses from the Flickr REST API. We need to\n * specify content-type: text/plain here to appease CORS\n * since the API does not accept application/json.\n * @param {Request} req\n * @returns {undefined}\n */\n\nmodule.exports = function (req) {\n\treq.query({ format: 'json' });\n\treq.query({ nojsoncallback: 1 });\n\treq.type('text/plain');\n\treq.ok(parseFlickr);\n};\n"]},"metadata":{},"sourceType":"script"}