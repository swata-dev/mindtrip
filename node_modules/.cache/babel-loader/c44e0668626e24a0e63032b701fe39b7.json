{"ast":null,"code":"/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\nvar request = require('superagent');\n\nvar parse = require('querystring').parse;\n/**\n * Subclass superagent's Request class so that we can add\n * our own functionality to it.\n * @param {String} method\n * @param {String} url\n * @constructor\n */\n\n\nfunction Request(method, url) {\n  request.Request.call(this, method, url); // keep track of all request params for oauth signing\n\n  this.params = {};\n}\n\nRequest.prototype = Object.create(request.Request.prototype);\n/**\n * Override .query() to also add query string params to our params hash.\n * @param {String|Object} val\n * @returns {this}\n */\n\nRequest.prototype.query = function (val) {\n  if (typeof val === 'string') {\n    Object.assign(this.params, parse(val));\n  } else {\n    Object.assign(this.params, val);\n  } // super\n\n\n  return request.Request.prototype.query.call(this, val);\n};\n/**\n * Override .field() to also add fields to our params hash.\n * @param {String|Object} key\n * @param {String} val\n * @returns {this}\n */\n\n\nRequest.prototype.field = function (key, val) {\n  if (typeof key === 'string') {\n    this.params[key] = val;\n  } else {\n    Object.assign(this.params, key);\n  } // super\n\n\n  return request.Request.prototype.field.call(this, key, val);\n};\n/**\n * Convenience method to either call .query() or .field()\n * based on this request's method.\n * @param {Object} obj\n * @returns {this}\n */\n\n\nRequest.prototype.param = function (obj) {\n  switch (this.method) {\n    case 'POST':\n      return this.field.call(this, obj);\n\n    default:\n      return this.query.call(this, obj);\n  }\n};\n/**\n * Mimic the request factory method that superagent exports.\n * @param {String} method\n * @param {String} url\n * @returns {Request}\n */\n\n\nexports = module.exports = function (method, url) {\n  // callback\n  if ('function' === typeof url) {\n    return new exports.Request('GET', method).end(url);\n  } // url first\n\n\n  if (1 === arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n};\n/**\n * Re-export all of the things superagent exports.\n */\n\n\nObject.assign(exports, request);\n/**\n * @module Request\n */\n\nexports.Request = Request;","map":{"version":3,"sources":["/Users/s-fujimoto/projects/mindtrip/node_modules/flickr-sdk/lib/request.js"],"names":["request","require","parse","Request","method","url","call","params","prototype","Object","create","query","val","assign","field","key","param","obj","exports","module","end","arguments","length"],"mappings":"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","sourcesContent":["/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\n\nvar request = require('superagent');\nvar parse = require('querystring').parse;\n\n/**\n * Subclass superagent's Request class so that we can add\n * our own functionality to it.\n * @param {String} method\n * @param {String} url\n * @constructor\n */\n\nfunction Request(method, url) {\n\trequest.Request.call(this, method, url);\n\n\t// keep track of all request params for oauth signing\n\tthis.params = {};\n}\n\nRequest.prototype = Object.create(request.Request.prototype);\n\n/**\n * Override .query() to also add query string params to our params hash.\n * @param {String|Object} val\n * @returns {this}\n */\n\nRequest.prototype.query = function (val) {\n\tif (typeof val === 'string') {\n\t\tObject.assign(this.params, parse(val));\n\t} else {\n\t\tObject.assign(this.params, val);\n\t}\n\n\t// super\n\treturn request.Request.prototype.query.call(this, val);\n};\n\n/**\n * Override .field() to also add fields to our params hash.\n * @param {String|Object} key\n * @param {String} val\n * @returns {this}\n */\n\nRequest.prototype.field = function (key, val) {\n\tif (typeof key === 'string') {\n\t\tthis.params[key] = val;\n\t} else {\n\t\tObject.assign(this.params, key);\n\t}\n\n\t// super\n\treturn request.Request.prototype.field.call(this, key, val);\n};\n\n/**\n * Convenience method to either call .query() or .field()\n * based on this request's method.\n * @param {Object} obj\n * @returns {this}\n */\n\nRequest.prototype.param = function (obj) {\n\tswitch (this.method) {\n\tcase 'POST':\n\t\treturn this.field.call(this, obj);\n\tdefault:\n\t\treturn this.query.call(this, obj);\n\t}\n};\n\n/**\n * Mimic the request factory method that superagent exports.\n * @param {String} method\n * @param {String} url\n * @returns {Request}\n */\n\nexports = module.exports = function (method, url) {\n\t// callback\n\tif ('function' === typeof url) {\n\t\treturn new exports.Request('GET', method).end(url);\n\t}\n\n\t// url first\n\tif (1 === arguments.length) {\n\t\treturn new exports.Request('GET', method);\n\t}\n\n\treturn new exports.Request(method, url);\n};\n\n/**\n * Re-export all of the things superagent exports.\n */\n\nObject.assign(exports, request);\n\n/**\n * @module Request\n */\n\nexports.Request = Request;\n"]},"metadata":{},"sourceType":"script"}