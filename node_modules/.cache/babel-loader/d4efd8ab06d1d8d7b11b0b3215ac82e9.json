{"ast":null,"code":"/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\nvar request = require('../lib/request');\n\nvar validate = require('../lib/validate');\n/**\n * Creates a new Feeds service instance. You can use this instance\n * to explore and retrieve public Flickr API data.\n *\n * @constructor\n * @param {Object} [args] Arguments that will be passed along with every feed request\n * @param {String} [args.format=json] The feed response format\n * @param {String} [args.lang=en-us] The language to request for the feed\n * @memberof Flickr\n *\n * @example\n *\n * var feeds = new Flickr.Feeds();\n */\n\n\nfunction Feeds(args) {\n  // allow creating a client without `new`\n  if (!(this instanceof Feeds)) {\n    return new Feeds(args);\n  } // default arguments\n\n\n  this._args = Object.assign({\n    format: 'json',\n    nojsoncallback: 1\n  }, args);\n}\n/**\n * Factory method to create a new request for a feed.\n * @param {String} feed\n * @param {Object} [args]\n * @returns {Request}\n * @private\n */\n\n\nFeeds.prototype._ = function (feed, args) {\n  return request('GET', 'https://www.flickr.com/services/feeds/' + feed + '.gne').query(this._args).query(args);\n};\n/**\n * Returns a list of public content matching some criteria.\n *\n * @param {Object} [args]\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/photos_public/\n */\n\n\nFeeds.prototype.publicPhotos = function (args) {\n  return this._('photos_public', args);\n};\n/**\n * Returns a list of public content from the contacts, friends & family of a given person.\n *\n * @param {Object} args\n * @param {Number|String} args.user_id The user ID of the user to fetch friends' photos and videos for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/photos_friends/\n */\n\n\nFeeds.prototype.friendsPhotos = function (args) {\n  validate(args, 'user_id');\n  return this._('photos_friends', args);\n};\n/**\n * Returns a list of public favorites for a given user.\n *\n * @param {Object} args\n * @param {Number|String} args.id A single user ID. This specifies a user to fetch for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/photos_faves/\n */\n\n\nFeeds.prototype.favePhotos = function (args) {\n  // This feed launched with support for id, but was\n  // later changed to support `nsid`. This allows us to\n  // check both, and fail if neither is specified\n  validate(args, ['id', 'nsid']);\n  return this._('photos_faves', args);\n};\n/**\n * Returns a list of recent discussions in a given group.\n *\n * @param {Object} args\n * @param {Number} args.id The ID of the group to fetch discussions for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/groups_discuss/\n */\n\n\nFeeds.prototype.groupDiscussions = function (args) {\n  validate(args, 'id');\n  return this._('groups_discuss', args);\n};\n/**\n * Returns a list of things recently added to the pool of a given group.\n *\n * @param {Object} args\n * @param {Number} args.id The ID of the group to fetch for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/groups_pool/\n */\n\n\nFeeds.prototype.groupPool = function (args) {\n  validate(args, 'id');\n  return this._('groups_pool', args);\n};\n/**\n * Returns a list of recent topics from the forum.\n *\n * @param {Object} [args]\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/forums/\n */\n\n\nFeeds.prototype.forum = function (args) {\n  return this._('forums', args);\n};\n/**\n * Returns a list of recent comments on photostream and sets belonging to a given user.\n *\n * @param {Object} args\n * @param {Number|String} args.user_id The user ID to fetch recent activity for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/activity/\n */\n\n\nFeeds.prototype.recentActivity = function (args) {\n  validate(args, 'user_id');\n  return this._('activity', args);\n};\n/**\n * Returns a list of recent comments that have been commented on by a given person.\n *\n * @param {Object} args\n * @param {Number|String} args.user_id The user ID to fetch recent comments for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/photos_comments/\n */\n\n\nFeeds.prototype.recentComments = function (args) {\n  validate(args, 'user_id');\n  return this._('photos_comments', args);\n};\n\nmodule.exports = Feeds;","map":{"version":3,"sources":["/Users/s-fujimoto/projects/mindtrip/node_modules/flickr-sdk/services/feeds.js"],"names":["request","require","validate","Feeds","args","_args","Object","assign","format","nojsoncallback","prototype","_","feed","query","publicPhotos","friendsPhotos","favePhotos","groupDiscussions","groupPool","forum","recentActivity","recentComments","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\n\nvar request = require('../lib/request');\nvar validate = require('../lib/validate');\n\n/**\n * Creates a new Feeds service instance. You can use this instance\n * to explore and retrieve public Flickr API data.\n *\n * @constructor\n * @param {Object} [args] Arguments that will be passed along with every feed request\n * @param {String} [args.format=json] The feed response format\n * @param {String} [args.lang=en-us] The language to request for the feed\n * @memberof Flickr\n *\n * @example\n *\n * var feeds = new Flickr.Feeds();\n */\n\nfunction Feeds(args) {\n\n\t// allow creating a client without `new`\n\tif (!(this instanceof Feeds)) {\n\t\treturn new Feeds(args);\n\t}\n\n\t// default arguments\n\tthis._args = Object.assign({ format: 'json', nojsoncallback: 1 }, args);\n}\n\n/**\n * Factory method to create a new request for a feed.\n * @param {String} feed\n * @param {Object} [args]\n * @returns {Request}\n * @private\n */\n\nFeeds.prototype._ = function (feed, args) {\n\treturn request('GET', 'https://www.flickr.com/services/feeds/' + feed + '.gne')\n\t\t.query(this._args)\n\t\t.query(args);\n};\n\n/**\n * Returns a list of public content matching some criteria.\n *\n * @param {Object} [args]\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/photos_public/\n */\n\nFeeds.prototype.publicPhotos = function (args) {\n\treturn this._('photos_public', args);\n};\n\n/**\n * Returns a list of public content from the contacts, friends & family of a given person.\n *\n * @param {Object} args\n * @param {Number|String} args.user_id The user ID of the user to fetch friends' photos and videos for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/photos_friends/\n */\n\nFeeds.prototype.friendsPhotos = function (args) {\n\tvalidate(args, 'user_id');\n\n\treturn this._('photos_friends', args);\n};\n\n/**\n * Returns a list of public favorites for a given user.\n *\n * @param {Object} args\n * @param {Number|String} args.id A single user ID. This specifies a user to fetch for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/photos_faves/\n */\n\nFeeds.prototype.favePhotos = function (args) {\n\t// This feed launched with support for id, but was\n\t// later changed to support `nsid`. This allows us to\n\t// check both, and fail if neither is specified\n\tvalidate(args, ['id', 'nsid']);\n\n\treturn this._('photos_faves', args);\n};\n\n/**\n * Returns a list of recent discussions in a given group.\n *\n * @param {Object} args\n * @param {Number} args.id The ID of the group to fetch discussions for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/groups_discuss/\n */\n\nFeeds.prototype.groupDiscussions = function (args) {\n\tvalidate(args, 'id');\n\n\treturn this._('groups_discuss', args);\n};\n\n/**\n * Returns a list of things recently added to the pool of a given group.\n *\n * @param {Object} args\n * @param {Number} args.id The ID of the group to fetch for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/groups_pool/\n */\n\nFeeds.prototype.groupPool = function (args) {\n\tvalidate(args, 'id');\n\n\treturn this._('groups_pool', args);\n};\n\n/**\n * Returns a list of recent topics from the forum.\n *\n * @param {Object} [args]\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/forums/\n */\n\nFeeds.prototype.forum = function (args) {\n\treturn this._('forums', args);\n};\n\n/**\n * Returns a list of recent comments on photostream and sets belonging to a given user.\n *\n * @param {Object} args\n * @param {Number|String} args.user_id The user ID to fetch recent activity for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/activity/\n */\n\nFeeds.prototype.recentActivity = function (args) {\n\tvalidate(args, 'user_id');\n\n\treturn this._('activity', args);\n};\n\n/**\n * Returns a list of recent comments that have been commented on by a given person.\n *\n * @param {Object} args\n * @param {Number|String} args.user_id The user ID to fetch recent comments for.\n * @returns {Request}\n * @see https://www.flickr.com/services/feeds/docs/photos_comments/\n */\n\nFeeds.prototype.recentComments = function (args) {\n\tvalidate(args, 'user_id');\n\n\treturn this._('photos_comments', args);\n};\n\nmodule.exports = Feeds;\n"]},"metadata":{},"sourceType":"script"}