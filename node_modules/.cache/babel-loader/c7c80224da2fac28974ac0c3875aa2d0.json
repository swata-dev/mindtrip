{"ast":null,"code":"/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\nvar xml2js = require('xml2js');\n/**\n * Custom response parse for parsing XML responses from Flickr.\n * Currently, the Upload and Replace APIs don't support JSON\n * as a response format. Until we fix this on the API side,\n * we need to parse the XML response so that the end user\n * can at least do something with it.\n * @param {Response} res\n * @param {Function} fn\n * @returns {null}\n */\n\n\nfunction parseXML(res, fn) {\n  // palmtree pray box this approach from superagent's JSON parser\n  res.text = '';\n  res.setEncoding('utf8'); // collect all the response text\n\n  res.on('data', function (chunk) {\n    res.text += chunk;\n  });\n  res.on('end', function () {\n    xml2js.parseString(res.text, {\n      mergeAttrs: true,\n      explicitArray: false,\n      explicitRoot: false,\n      explicitCharkey: true,\n      charkey: '_content'\n    }, function (err, body) {\n      if (err) {\n        return fn(new SyntaxError(err.message), body);\n      }\n\n      if (body.stat === 'fail' && body.err) {\n        err = new Error(body.err.msg);\n        err.stat = body.stat;\n        err.code = body.err.code;\n      }\n\n      fn(err, body);\n    });\n  });\n}\n/**\n * Superagent plugin-style function to request and parse\n * XML responses from the Flickr Upload and Replace APIs.\n * @param {Request} req\n * @returns {undefined}\n */\n\n\nmodule.exports = function (req) {\n  req.parse(parseXML);\n};","map":{"version":3,"sources":["/Users/s-fujimoto/projects/mindtrip/node_modules/flickr-sdk/plugins/xml.js"],"names":["xml2js","require","parseXML","res","fn","text","setEncoding","on","chunk","parseString","mergeAttrs","explicitArray","explicitRoot","explicitCharkey","charkey","err","body","SyntaxError","message","stat","Error","msg","code","module","exports","req","parse"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,EAAvB,EAA2B;AAC1B;AACAD,EAAAA,GAAG,CAACE,IAAJ,GAAW,EAAX;AACAF,EAAAA,GAAG,CAACG,WAAJ,CAAgB,MAAhB,EAH0B,CAK1B;;AACAH,EAAAA,GAAG,CAACI,EAAJ,CAAO,MAAP,EAAe,UAAUC,KAAV,EAAiB;AAC/BL,IAAAA,GAAG,CAACE,IAAJ,IAAYG,KAAZ;AACA,GAFD;AAIAL,EAAAA,GAAG,CAACI,EAAJ,CAAO,KAAP,EAAc,YAAY;AACzBP,IAAAA,MAAM,CAACS,WAAP,CAAmBN,GAAG,CAACE,IAAvB,EAA6B;AAC5BK,MAAAA,UAAU,EAAE,IADgB;AAE5BC,MAAAA,aAAa,EAAE,KAFa;AAG5BC,MAAAA,YAAY,EAAE,KAHc;AAI5BC,MAAAA,eAAe,EAAE,IAJW;AAK5BC,MAAAA,OAAO,EAAE;AALmB,KAA7B,EAMG,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAEvB,UAAID,GAAJ,EAAS;AACR,eAAOX,EAAE,CAAC,IAAIa,WAAJ,CAAgBF,GAAG,CAACG,OAApB,CAAD,EAA+BF,IAA/B,CAAT;AACA;;AAED,UAAIA,IAAI,CAACG,IAAL,KAAc,MAAd,IAAwBH,IAAI,CAACD,GAAjC,EAAsC;AACrCA,QAAAA,GAAG,GAAG,IAAIK,KAAJ,CAAUJ,IAAI,CAACD,GAAL,CAASM,GAAnB,CAAN;AACAN,QAAAA,GAAG,CAACI,IAAJ,GAAWH,IAAI,CAACG,IAAhB;AACAJ,QAAAA,GAAG,CAACO,IAAJ,GAAWN,IAAI,CAACD,GAAL,CAASO,IAApB;AACA;;AAEDlB,MAAAA,EAAE,CAACW,GAAD,EAAMC,IAAN,CAAF;AACA,KAnBD;AAoBA,GArBD;AAsBA;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEAO,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC/BA,EAAAA,GAAG,CAACC,KAAJ,CAAUxB,QAAV;AACA,CAFD","sourcesContent":["/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n */\n\nvar xml2js = require('xml2js');\n\n/**\n * Custom response parse for parsing XML responses from Flickr.\n * Currently, the Upload and Replace APIs don't support JSON\n * as a response format. Until we fix this on the API side,\n * we need to parse the XML response so that the end user\n * can at least do something with it.\n * @param {Response} res\n * @param {Function} fn\n * @returns {null}\n */\n\nfunction parseXML(res, fn) {\n\t// palmtree pray box this approach from superagent's JSON parser\n\tres.text = '';\n\tres.setEncoding('utf8');\n\n\t// collect all the response text\n\tres.on('data', function (chunk) {\n\t\tres.text += chunk;\n\t});\n\n\tres.on('end', function () {\n\t\txml2js.parseString(res.text, {\n\t\t\tmergeAttrs: true,\n\t\t\texplicitArray: false,\n\t\t\texplicitRoot: false,\n\t\t\texplicitCharkey: true,\n\t\t\tcharkey: '_content'\n\t\t}, function (err, body) {\n\n\t\t\tif (err) {\n\t\t\t\treturn fn(new SyntaxError(err.message), body);\n\t\t\t}\n\n\t\t\tif (body.stat === 'fail' && body.err) {\n\t\t\t\terr = new Error(body.err.msg);\n\t\t\t\terr.stat = body.stat;\n\t\t\t\terr.code = body.err.code;\n\t\t\t}\n\n\t\t\tfn(err, body);\n\t\t});\n\t});\n}\n\n/**\n * Superagent plugin-style function to request and parse\n * XML responses from the Flickr Upload and Replace APIs.\n * @param {Request} req\n * @returns {undefined}\n */\n\nmodule.exports = function (req) {\n\treq.parse(parseXML);\n};\n"]},"metadata":{},"sourceType":"script"}